#!/bin/bash

RUNDIR="${RUNDIR:-/root/.init7}"
TMPDIR="${TMPDIR:-/tmp/slb.tmp}"

SHOULD_I_EXPORT=${SHOULD_I_EXPORT:-0}
LOG_FILE=${LOG_FILE:-/tmp/tee-ops.log}
DEBUG=${DEBUG:-0}
MAIN_DEV=${MAIN_DEV:-eth0}

# DEBUG ENHANCES
export PS4='+${BASH_SOURCE}:${LINENO}:${FUNCNAME[0]}: '
function DEBUG () {
  if [ $DEBUG -eq 0 2>/dev/null ]; then
    echo "$@" >$LOG_FILE
  else
    echo "$@" | tee -a $LOG_FILE
  fi
}

# POSITIONS
function if_os () { [[ $OSTYPE == *$1* ]]; }
function if_not_os () { [[ $OSTYPE != *$1* ]]; }
function if_nix () { 
    case "$OSTYPE" in
        *linux*|*hurd*|*msys*|*cygwin*|*sua*|*interix*) sys="gnu";;
        *bsd*|*darwin*) sys="bsd";;
        *sunos*|*solaris*|*indiana*|*illumos*|*smartos*) sys="sun";;
    esac
    [[ "${sys}" == "$1" ]];
}
function if_mac () { [[ $OSTYPE == *darwin* ]]; }
function if_ubuntu () {
  if [[ $OSTYPE == *linux* ]]; then
    [ -f /etc/os-release ] && grep -i 'ubuntu' /etc/os-release >/dev/null
  else
    false
  fi
}

if_centos () {
  if [[ $OSTYPE == *linux* ]]; then
    [ -f /etc/issue ] && grep -Pi '(centos|(Amazon Linux AMI))' /etc/issue >/dev/null
  else
    false
  fi
}
if_aliyun () {
  false
}
if_aws_cn () {
  true
}
if_aws () {
  false
}

# echo
if [[ $OSTYPE == *darwin* ]]; then
  function realpathx () { [[ "$1" == "/*" ]] && echo "$1" || echo "$PWD/${1#./}" ; }
  function mylocalip () { ifconfig|grep inet[^6]|grep -Ev '((127.0.0.1)|(192.168.2)|(192.168.[0-9]{2,})|(169.254)|(10\.[0-9]{2,}\.[0-9]{2,}\.[0-9]{2,}))'|grep -Eo 'inet [^ ]+'|grep -Eo '\d+.\d+.\d+.\d+'; }
else
  function realpathx () { readlink -f $*; }
  function mylocalip () { ip addr show dev $MAIN_DEV|grep inet[^6]|grep -Eoi 'inet [^ /]+'|grep -Poi '\d+[^ /]+'; }
fi

# 如果正在被source in，则返回true(SHELL的返回值为0表示true状态)
# 对于被source的脚本自身，可以用如下方式来返回以免意外关闭shell：return 1 2>/dev/null || exit 1
function if_in_source () { [[ $- = *i* ]]; }
# 如果是从一个symlink上被执行的
function if_launched_from_symlink () { [ -L $0 ]; }

is_root () { [ "`id -u`" == "0" ]; }
is_bash () { [ -n "$BASH_VERSION" ]; }
is_interactive_shell () { [[ $- == *i* ]]; }
is_not_interactive_shell () { [[ $- != *i* ]]; }
is_ps1 () { [ -z "$PS1" ]; }
is_not_ps1 () { [ ! -z "$PS1" ]; }
is_stdin () { [ -t 0 ]; }
is_not_stdin () { [ ! -t 0 ]; }

function ports () {
    if [ $# -eq 0 ]; then
        sudo lsof -Pni | grep -P "LISTEN|UDP"
    else
        local p=''
        local i
        for i in $*; do
            if [ "$i" -eq "$i" 2>/dev/null ]; then
                p="$p -i :$i"
            else
                p="$p -i $i"
            fi
        done
        sudo lsof -Pn $p
    fi
}

function sshcall () {
  local host=$1; shift;
  local port=$(_find_sw_port $host)
  if [ $port -eq $port 2>/dev/null ]; then
    echo "\$# ssh -T -p $port $* root@$host \"$@\"";
    ssh -o StrictHostKeyChecking=no -T -p $port root@$host "$@";
  else
    echo "Port for '$host' NOT FOUND, sshcall was broken."
  fi
}
function sshcall2 () {
  local host=$1; shift;
  local port=$(_find_sw_port $host)
  if [ $port -eq $port 2>/dev/null ]; then
    echo "\$# ssh -T -p $port $* root@$host \"$@\"";
    ssh -o StrictHostKeyChecking=no -T -p $port root@$host "$@";
  else
    echo "Port for '$host' NOT FOUND, sshcall was broken."
  fi
}
function scppull () {
  local host=$1; local remotefile=$2; localdir=$3; shift; shift; shift;
  local port=$(_find_sw_port $host)
  if [ $port -eq $port 2>/dev/null ]; then
  echo "scp -P $port -rC $* root@$host:$remotefile ${localdir:-.}";
  scp -p $port -rC $* root@$host:$remotefile ${localdir:-.};
  else
    echo "Port for '$host' NOT FOUND, scppull was broken."
  fi
}
function scppush () {
  local host=$1; local localfile=$2; remotedir=$3; shift; shift; shift;
  local port=$(_find_sw_port $host)
  if [ $port -eq $port 2>/dev/null ]; then
  [ "$remotedir" == "" ] && remotedir=$MMM_TMP_DIR/;
  echo "scp -P $port -rC $localfile root@$host:$remotedir";
  scp -P $port -rC $localfile root@$host:$remotedir;
  else
    echo "Port for '$host' NOT FOUND, scppush was broken."
  fi
}


function lines() {
  for ((i=0;i<$1;i++)); do echo ""; done
}

#IN="bla@some.com;john@home.com"
#arrIN=(${IN//;/ })
#for i in $(echo $IN | tr ";" "\n"); do echo $i; done
#${var#*SubStr}  # will drop begin of string upto first occur of `SubStr`
#${var##*SubStr} # will drop begin of string upto last occur of `SubStr`
#${var%SubStr*}  # will drop part of string from last occur of `SubStr` to the end
#${var%%SubStr*} # will drop part of string from first occur of `SubStr` to the end


#  [ ! -f /usr/bin/.ka.sh ] && cat > /usr/bin/.ka.sh

function find_gw () { ip addr|grep -Pi "$1"|grep -Poi "[^ \t]+$"; }
function find_ip () { ip addr|grep -Poi "inet ((192.168.\d+.\d+)|(172.\d+.\d+.\d+)|(10.\d+.\d+.\d+))"|grep -Poi "\d+.\d+.\d+.\d+"; }
function find_ip_uniq () { ip addr|grep -Poi "inet ((192.168.\d+.\d+)|(172.\d+.\d+.\d+)|(10.\d+.\d+.\d+))"|grep -Poi "\d+.\d+.\d+.\d+"|grep -v '\.255'|head -n1; }
# 仅适用于Aliyun
#ali-ip-local () { ip addr show eth0 | grep inet | awk '{ print $2; }' | sed 's/\/.*$//'; }
#ali-ip-wan () { ip addr show eth1 | grep inet | awk '{ print $2; }' | sed 's/\/.*$//'; }
ip-local () {
  if_aliyun && {
    ip addr show $MAIN_DEV | grep inet | awk '{ print $2; }' | sed 's/\/.*$//'
  } || {
    ip addr show $MAIN_DEV | grep inet | grep -v '::' | awk '{ print $2; }' | sed 's/\/.*$//'
  }
}
ip-wan () {
  if_aliyun && {
    ip addr show eth1 | grep inet | awk '{ print $2; }' | sed 's/\/.*$//'
  } || {
    #alias wanip='dig +short myip.opendns.com @resolver1.opendns.com'
    dig +short myip.opendns.com @resolver1.opendns.com
  }
}

function check_keepalived_status () {
  (ps aux | grep keepalived | grep -v grep) || echo 'keepalived not running.'
  local lip=$(find_ip_uniq)
  local lgw=$(find_gw lip)
  echo "GATEWAY DEV: $lgw"
  ifconfig $lgw
}

function check_mysql_status () { service mysql status; }

function mysql_call () { cat $* | mysql -uroot -p$(cat /etc/passwd2); }

# mysql_status -i 5 每5秒钟打印一行统计状态信息，形如：
# Uptime: 87117 Threads: 1 Questions: 5481626 Slow queries: 16 Opens: 2211 Flush tables: 1 Open tables: 512 Queries per second avg: 62.923
function mysql_status () { mysqladmin -uroot -p$(cat /etc/passwd2) status $*; }

function mysql_extended_status () { mysqladmin -uroot -p$(cat /etc/passwd2) extended-status $*; }


# UBUNTU / DEBIAN Packages; CentOS/RHEL6+ Packages

function is_package_installed () {
  if_centos && {
    if yum list installed "$@" >/dev/null 2>&1; then
      true
    else
      false
    fi
  } || {
    dpkg --get-selections|grep -Pi "$1[ \t]+install" 1>/dev/null
    [[ $? -eq 0 ]] && (echo "    $1 exists" && return 0) || return 1;
  }
}

function is_packages_all_installed () {
  if_centos && {
    if yum list installed "$@" >/dev/null 2>&1; then
      true
    else
      false
    fi
  } || {
    for pkg in $*; do
        dpkg --get-selections|grep -Pi "$1[ \t]+install" 1>/dev/null
        [[ $? -eq 0 ]] && (echo "    $1 exists" && continue) || return 1;
    done
    return 0
  }
}

function is_packages_any_installed () {
  if_centos && {
    if yum list installed "$@" >/dev/null 2>&1; then
      true
    else
      false
    fi
  } || {
    for pkg in $*; do
        dpkg --get-selections|grep -Pi "$1[ \t]+install" 1>/dev/null
        [[ $? -eq 0 ]] && (echo "    $1 exists" && return 0) || continue;
    done
    return 1
  }
}

# TODO
function is_package_lower () {
    local RES=$(dpkg --get-selections|grep -Pi "$1[ \t]+install")
    [[ $? -eq 0 ]] && (echo "    $1 exists" && echo $RES && return 0) || return 1;
}

function package-list () {
  sudo yum list "$@"
}

function package-list-installed () {
  sudo yum list installed "$@"
}

function install_packages () {
  if_centos && {
    if sudo yum list installed "$@" >/dev/null 2>&1; then
      true
    else
      sudo yum install -y "%@"
    fi
  } || {
    declare -a RR
    for pkg in $*; do
      dpkg --get-selections|grep -Pi "$pkg[ \t]+install" 1>/dev/null
      [[ $? -eq 0 ]] && (echo "    $pkg exists";) || RR=("${RR[@]}" "$pkg")
    done

    [[ ${#RR[@]} > 0 ]] && (echo "  将要安装 ${RR[@]}..."; apt-get install -y --force-yes ${RR[@]} && return 0) || return 1;
  }
}
function install-packages () { install_packages $*; }
function package-install () { install_packages $*; }




########## COLORS

green='\e[0;32m' # '\e[1;32m' is too bright for white bg.
endColor='\e[0m'
function colored_eval () {
  local none="\[\033[0m\]"

  local black="\[\033[0;30m\]"
  local dark_gray="\[\033[1;30m\]"
  local blue="\[\033[0;34m\]"
  local light_blue="\[\033[1;34m\]"
  local green="\[\033[0;32m\]"
  local light_green="\[\033[1;32m\]"
  local cyan="\[\033[0;36m\]"
  local light_cyan="\[\033[1;36m\]"
  local red="\[\033[0;31m\]"
  local light_red="\[\033[1;31m\]"
  local purple="\[\033[0;35m\]"
  local light_purple="\[\033[1;35m\]"
  local brown="\[\033[0;33m\]"
  local yellow="\[\033[1;33m\]"
  local light_gray="\[\033[0;37m\]"
  local white="\[\033[1;37m\]"

  local current_tty=`tty | sed -e "s/\/dev\/\(.*\)/\1/"`

  eval "$@"
}
color-table () {
    for((i=16; i<256; i++)); do
        printf "\e[48;5;${i}m%03d" $i;
        printf '\e[0m';
        [ ! $((($i - 15) % 6)) -eq 0 ] && printf ' ' || printf '\n'
    done
}



## ii

ii() {
    local c_red='\e[31m'
    local c_green='\e[32m'
    local c_lblue='\e[1;34m'
    local c_clear='\e[0m'
    echo -ne  "\n${c_red}       You are logged on : ${c_clear}${c_green}$(hostname)${c_clear}"
    echo -ne  "\n${c_red} Additionnal information : ${c_clear}$NC " ; uname -a
    # echo -ne    "${c_red}         Users logged on : ${c_clear}$NC " ; w -h | head -1
    echo -ne    "${c_red}            Current date : ${c_clear}$NC " ; date
    echo -ne    "${c_red}           Machine stats : ${c_clear}$NC" ; uptime
    #echo -e "\n${c_red}Current network location : ${c_clear}$NC " ; scselect
    echo -ne    "${c_red}Public facing IP Address : ${c_clear}$c_green$(ip-wan)$c_clear / $c_green$(find_gw $(ip-wan))$c_clear"
    echo -ne "\n${c_red}        Local IP Address : ${c_clear}$c_green$(ip-local)$c_clear / $c_green$(find_gw $(ip-local))$c_clear"
    #echo -ne "\nLocal IP Address  : ${c_red}$(mylocalip)$c_clear / $c_red$(mylocalgw)$c_clear / $c_red$(mylocalni)$c_clear"
    #echo -e "\nDNS Configurations:$NC " ; mylocaldns
    echo ""
}

## run at user logined (.bashrc)

at_login () {
  is_interactive_shell && {
    #[ -z "$PS1" ] && {
      #
      #[ -t 0 ] && echo "-t 1" || {
        ii
        echo "" # for spacing
        w|tail -n +2 # uptime information and who is logged in
        echo "" # for spacing
        df -hlT -x udev -x tmpfs -x devtmpfs # disk usage, minus def and swap
        export EDITOR=/usr/bin/nano
        alias pssh="parallel-ssh"
        alias pscp="parallel-scp"

        alias bash-framework-self-update='curl -sSL https://hedzr.com/bash-framework/installer | sudo bash -s'
      #}
    #} || echo "zero PS1"
  } #|| echo -e "\`$USER\` logined: non-interactive shell"
}

# echo "$?"

# if [[ $- = *i* ]]; then
#     echo "in source"; return 0
# else
#     exit 0
# fi

[[ $SHOULD_I_EXPORT -eq 1 ]] && export -f \
       if_os if_not_os if_nix realpathx \
       mylocalip \
       sshcall scppull scppush \
       find_gw find_ip \
       "check_keepalived_status" \
       "check_mysql_status" \
       "mysql_call" \
       "mysql_status" \
       "mysql_extended_status" \
       install_packages \
       is_package_installed \
|| (echo ".env was sourced in but no permanent exports.">/dev/null);
true;

