#!/bin/bash

RUNDIR="${RUNDIR:-/root/.init7}"
TMPDIR="${TMPDIR:-/tmp/slb.tmp}"

SHOULD_I_EXPORT=${SHOULD_I_EXPORT:-0}
LOG_FILE=${LOG_FILE:-/tmp/tee-ops.log}
DEBUG=${DEBUG:-0}
MAIN_DEV=${MAIN_DEV:-eth0}

# DEBUG ENHANCES
export PS4='+${BASH_SOURCE}:${LINENO}:${FUNCNAME[0]}: '
function DEBUG () {
  if [[ ${DEBUG:-0} -eq 0 ]]; then
    echo "$@" >"$LOG_FILE"
  else
    echo "$@" | tee -a "$LOG_FILE"
  fi
}

# POSITIONS
function if_os () { [[ $OSTYPE == *$1* ]]; }
function if_not_os () { [[ $OSTYPE != *$1* ]]; }
function if_nix () { 
    case "$OSTYPE" in
        *linux*|*hurd*|*msys*|*cygwin*|*sua*|*interix*) sys="gnu";;
        *bsd*|*darwin*) sys="bsd";;
        *sunos*|*solaris*|*indiana*|*illumos*|*smartos*) sys="sun";;
    esac
    [[ "${sys}" == "$1" ]];
}
function if_mac () { [[ $OSTYPE == *darwin* ]]; }
function if_ubuntu () {
  if [[ $OSTYPE == *linux* ]]; then
    [ -f /etc/os-release ] && grep -i 'ubuntu' /etc/os-release >/dev/null
  else
    false
  fi
}

function if_centos () {
  if [[ $OSTYPE == *linux* ]]; then
    [ -f /etc/issue ] && grep -Pi '(centos|(Amazon Linux AMI))' /etc/issue >/dev/null
  else
    false
  fi
}
# 部分正确，aliyun标准镜像中，ubuntu 14.04通过本测试
function if_aliyun () {
  grep 'aliyun' /etc/motd >/dev/null
}
# only amzn-linux
function aws_region() {
  [ -d /etc/yum/vars ] && cat /etc/yum/vars/awsregion
}
# only amzn-linux
function aws_domain() {
  [ -d /etc/yum/vars ] && cat /etc/yum/vars/awsdomain
}
function if_aws_cn_2() {
  [ -d /var/lib/cloud ] && [ -d /var/lib/cloud/instance ]
  # curl http://169.254.169.254/latest/meta-data/instance-id
}
function if_aws_cn() {
  #[ $(aws_domain) == 'amazonaws.com.cn' ];
  [ -f /var/lib/cloud/instance/obj.pkl ] && grep 'cn-north' /var/lib/cloud/instance/obj.pkl >/dev/null
}
function if_aws_cn_heavy () {
  if_centos && {
    # [ -f /etc/issue ] && grep -Pi 'Amazon Linux AMI' /etc/issue >/dev/null
    yum list| grep cloud-init
    return
  }

  dpkg -l | grep cloud-init
}
function if_aws () {
  [[ -d /var/lib/cloud && -d /var/lib/cloud/instance ]];
}
# non-cn
function if_aws_us () {
  if [[ -d /var/lib/cloud && -d /var/lib/cloud/instance ]]; then
    ! if_aws_cn
  else
    false
  fi
}
function aws-curl() {
  # http://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/ec2-instance-metadata.html#instancedata-data-retrieval
  curl http://169.254.169.254/latest/meta-data/
  echo ""
  # ami-id
  # ami-launch-index
  # ami-manifest-path
  # block-device-mapping/
  # hostname
  # instance-action
  # instance-id
  # instance-type
  # local-hostname
  # local-ipv4
  # mac
  # metrics/
  # network/
  # placement/
  # profile
  # public-hostname
  # public-ipv4
  # public-keys/
  # reservation-id
  # security-groups
  # services/
}

# echo
if [[ $OSTYPE == *darwin* ]]; then
  function realpathx () { [[ "$1" == "/*" ]] && echo "$1" || echo "$PWD/${1#./}" ; }
  function mylocalip () { ifconfig|grep inet[^6]|grep -Ev '((127.0.0.1)|(192.168.2)|(192.168.[0-9]{2,})|(169.254)|(10\.[0-9]{2,}\.[0-9]{2,}\.[0-9]{2,}))'|grep -Eo 'inet [^ ]+'|grep -Eo '\d+.\d+.\d+.\d+'; }
else
  function realpathx () { readlink -f $*; }
  function mylocalip () { ip addr show dev $MAIN_DEV|grep inet[^6]|grep -Eoi 'inet [^ /]+'|grep -Poi '\d+[^ /]+'; }
fi

# 如果正在被source in，则返回true(SHELL的返回值为0表示true状态)
# 对于被source的脚本自身，可以用如下方式来返回以免意外关闭shell：return 1 2>/dev/null || exit 1
function if_in_source () { [[ $- = *i* ]]; }
function if_in_source_bash () { [ -n "$BASH_SOURCE" -a "$BASH_SOURCE" != "$0" ]; }
# 如果是从一个symlink上被执行的
function if_launched_from_symlink () { [ -L "$0" ]; }

function is_root () { [ "$(id -u)" == "0" ]; }
function is_bash () { [ -n "$BASH_VERSION" ]; }
function is_bash_t2 () { [ ! -n "$BASH" ]; }
function is_zsh () { [ -n "$ZSH_NAME" ]; }
function is_interactive_shell () { [[ $- == *i* ]]; }
function is_not_interactive_shell () { [[ $- != *i* ]]; }
function is_ps1 () { [ -z "$PS1" ]; }
function is_not_ps1 () { [ ! -z "$PS1" ]; }
function is_stdin () { [ -t 0 ]; }
function is_not_stdin () { [ ! -t 0 ]; }


function ports () {
    if [ $# -eq 0 ]; then
        sudo lsof -Pni | grep -P "LISTEN|UDP"
    else
        local p='' i
        for i in "$@"; do
            if [[ "$i" -eq "$i" ]]; then
                p="$p -i :$i"
            else
                p="$p -i $i"
            fi
        done
        sudo lsof -Pn "$p"
    fi
}

function hostnames () {
  cat <<EOT
hostname: $(hostname)
    fqdn: $(hostname -f)
all-fqdn: $(hostname -A)
   short: $(hostname -s)
  domain: $(hostname -d)
   alias: $(hostname -a)
EOT
# AmazonLinux 没有 -b
#     boot: $(hostname -b)
}

disc-info-all () {
  for h in sw08 sw09 sw10 sw12; do
    echo "------------- $h.com -----------";
    ssh "root@$h.com" "df -halT -x tmpfs -x proc -x aufs -x cgroup -x sysfs -x devtmpfs -x devpts -x fusectl -x debugfs -x tracefs -x securityfs -x pstore -x nsfs -x fuse.gvfsd-fuse -x binfmt_misc -x mqueue -x vfat -x efivarfs -x hugetlbfs $*";
  done
}

disc-info () {
  df -halT -x tmpfs -x proc -x aufs -x cgroup -x sysfs -x devtmpfs \
  -x devpts -x fusectl -x debugfs -x tracefs -x securityfs -x pstore \
  -x nsfs -x fuse.gvfsd-fuse -x binfmt_misc \
  -x mqueue -x vfat -x efivarfs -x hugetlbfs "$@"
}




# shellcehck disable=SC2155,SC2034,SC2009
function sshcall () {
  local host=$1; shift;
  local port=$(_find_sw_port $host)
  if [[ $port -eq $port ]]; then
    echo "\$# ssh -T -p $port $* root@$host \"$@\"";
    ssh -o StrictHostKeyChecking=no -T -p $port root@$host "$@";
  else
    echo "Port for '$host' NOT FOUND, sshcall was broken."
  fi
}
# shellcehck disable=SC2155,SC2034,SC2009
function sshcall2 () {
  local host=$1; shift;
  local port=$(_find_sw_port $host)
  if [[ $port -eq $port ]]; then
    echo "\$# ssh -T -p $port $* root@$host \"$@\"";
    ssh -o StrictHostKeyChecking=no -T -p $port root@$host "$@";
  else
    echo "Port for '$host' NOT FOUND, sshcall was broken."
  fi
}
# shellcehck disable=SC2155,SC2034,SC2009
function scppull () {
  local host=$1 remotefile=$2 dir=$3; shift; shift; shift;
  local port=$(_find_sw_port $host)
  if [[ $port -eq $port ]]; then
    echo "scp -P $port -rC $* root@$host:$remotefile ${localdir:-.}";
    scp -p $port -rC $* root@$host:$remotefile ${localdir:-.};
  else
    echo "Port for '$host' NOT FOUND, scppull was broken."
  fi
}
# shellcehck disable=SC2155
function scppush () {
  local host=$1 localfile=$2 remotedir=$3; shift; shift; shift;
  local port=$(_find_sw_port $host)
  if [[ $port -eq $port ]]; then
    [ "$remotedir" == "" ] && remotedir=$MMM_TMP_DIR/;
    echo "scp -P $port -rC $localfile root@$host:$remotedir";
    scp -P "$port" -rC "$localfile" "root@$host:$remotedir";
  else
    echo "Port for '$host' NOT FOUND, scppush was broken."
  fi
}


function lines() {
  for ((i=0;i<$1;i++)); do echo ""; done
}

#IN="bla@some.com;john@home.com"
#arrIN=(${IN//;/ })
#for i in $(echo $IN | tr ";" "\n"); do echo $i; done
#${var#*SubStr}  # will drop begin of string upto first occur of `SubStr`
#${var##*SubStr} # will drop begin of string upto last occur of `SubStr`
#${var%SubStr*}  # will drop part of string from last occur of `SubStr` to the end
#${var%%SubStr*} # will drop part of string from first occur of `SubStr` to the end


#  [ ! -f /usr/bin/.ka.sh ] && cat > /usr/bin/.ka.sh

function find_gw () { ip addr|grep -Pi "$1"|grep -Poi "[^ \t]+$"; }
function find_mask () { /sbin/ifconfig "$MAIN_DEV" | grep Mask | cut -d":" -f4; }
function find_ip () { ip addr|grep -Poi "inet ((192.168.\d+.\d+)|(172.\d+.\d+.\d+)|(10.\d+.\d+.\d+))"|grep -Poi "\d+.\d+.\d+.\d+"; }
function find_ip_uniq () { ip addr|grep -Poi "inet ((192.168.\d+.\d+)|(172.\d+.\d+.\d+)|(10.\d+.\d+.\d+))"|grep -Poi "\d+.\d+.\d+.\d+"|grep -v '\.255'|head -n1; }
# 仅适用于Aliyun
#ali-ip-local () { ip addr show eth0 | grep inet | awk '{ print $2; }' | sed 's/\/.*$//'; }
#ali-ip-wan () { ip addr show eth1 | grep inet | awk '{ print $2; }' | sed 's/\/.*$//'; }
# shellcehck disable=SC2086
function subnet_from_ip_and_mask () {
  local i1 i2 i3 i4 m1 m2 m3 m4
  local x4=0
  IFS=. read -r i1 i2 i3 i4 <<< "$1"
  IFS=. read -r m1 m2 m3 m4 <<< "$2"
  [ $# -eq 3 ] && x4=$3
  printf "%d.%d.%d.%d\n" "$((i1 & m1))" "$((i2 & m2))" "$((i3 & m3))" "$((i4 & m4 | x4))"
  #192.168.0.0
}
# shellcehck disable=SC2086
function ip_local () {
  if_aliyun && {
    ip addr show "$MAIN_DEV" | grep inet | awk '{ print $2; }' | sed 's/\/.*$//'
    return
  }
  ip addr show "$MAIN_DEV" | grep inet | grep -v '::' | awk '{ print $2; }' | sed 's/\/.*$//'
}
function ip-local () { ip_local "$@"; }
# shellcehck disable=SC2086
function ip_wan () {
  if_aliyun && {
    ip addr show eth1 | grep inet | awk '{ print $2; }' | sed 's/\/.*$//'
    return
  }

  #alias wanip='dig +short myip.opendns.com @resolver1.opendns.com'
  dig +short myip.opendns.com @resolver1.opendns.com
}
function ip-wan () { ip_wan "$@"; }
# shellcehck disable=SC2119
function ip_lan () {
  if_aliyun && ip-local && return;

  if [ $# -eq 0 ]; then
    find_ip_uniq
  else
    ip addr|grep -Poi "inet ((192.168.\d+.\d+)|(172.\d+.\d+.\d+)|(10.\d+.\d+.\d+))"|grep -Poi "\d+.\d+.\d+.\d+"|grep -v '\.255'|head -n"$1"|tail -1;
  fi
}
function ip-lan () { ip_lan "$@"; }
function ip-mask () { find_mask; }
function ip_mask () { find_mask; }
function ip-subnet () { subnet_from_ip_and_mask "$(ip_lan)" "$(ip_mask)"; }
function ip_subnet () { subnet_from_ip_and_mask "$(ip_lan)" "$(ip_mask)"; }
function ip-gw () { subnet_from_ip_and_mask "$(ip_lan)" "$(ip_mask)" 1; }
function ip_gw () { subnet_from_ip_and_mask "$(ip_lan)" "$(ip_mask)" 1; }

# shellcehck disable=SC2155,SC2034,SC2009
function check_keepalived_status () {
  { ps aux | grep keepalived | grep -v grep;} || echo 'keepalived not running.'
  # shellcehck disable=SC2155,SC2034
  local lip=$(find_ip_uniq) lgw=$(find_gw lip)
  echo "GATEWAY DEV: $lgw"
  ifconfig "$lgw"
}

function check_mysql_status () { service mysql status; }

# send a file/here-doc to mysql-call
function mysql_call () { cat "$1" | mysql -uroot -p"$(cat /etc/passwd2 2>/dev/null)"; }

# mysql_status -i 5 每5秒钟打印一行统计状态信息，形如：
# Uptime: 87117 Threads: 1 Questions: 5481626 Slow queries: 16 Opens: 2211 Flush tables: 1 Open tables: 512 Queries per second avg: 62.923
function mysql_status () { mysqladmin -uroot -p"$(cat /etc/passwd2 2>/dev/null)" status "$@"; }

function mysql_extended_status () { mysqladmin -uroot -p"$(cat /etc/passwd2 2>/dev/null)" extended-status "$@"; }




# UBUNTU / DEBIAN Packages

function is_package_installed () {
  if_centos && {
    if yum list installed "$@" >/dev/null 2>&1; then
      true
    else
      false
    fi
    return;
  };
  if_ubuntu && {
    if dpkg --get-selections|grep -Pi "$1[ \t]+install" 1>/dev/null; then
      echo "    $1 exists" && return 0;
    else
      return 1;
    fi
  }
}

function is_packages_all_installed () {
  if_centos && {
    if yum list installed "$@" >/dev/null 2>&1; then
      true
    else
      false
    fi
    return
  };
  if_ubuntu && {
    for pkg in "$@"; do
        if dpkg --get-selections|grep -Pi "$1[ \t]+install" 1>/dev/null; then
          echo "    $1 exists" && continue;
        else
          return 1;
        fi
    done
    return 0
  }
}

function is_packages_any_installed () {
  if_centos && {
    if yum list installed "$@" >/dev/null 2>&1; then
      true
    else
      false
    fi
    return
  };
  if_ubuntu && {
    for pkg in "$@"; do
        if dpkg --get-selections|grep -Pi "$1[ \t]+install" 1>/dev/null; then
          echo "    $1 exists" && return 0;
        else
          continue;
        fi
    done
    return 1
  }
}

# TODO
function is_package_lower () {
    local RES
    RES=$(dpkg --get-selections|grep -Pi "$1[ \t]+install")
    # shellcheck disable=SC2181
    if [[ $? -eq 0 ]]; then echo "    $1 exists" && echo "$RES" && return 0; else return 1;fi
}

function package_list () {
  sudo yum list "$@"
}

function package_list_installed () {
  sudo yum list installed "$@"
}

function install_packages () {
  if if_centos; then
    declare -a RR
    for pkg in "$@"; do
      if sudo yum list installed "$pkg" >/dev/null 2>&1; then
        echo "    $pkg exists";
      else
        RR=("${RR[@]}" "$pkg")
      fi
    done
    if [[ ${#RR[@]} -gt 0 ]]; then
      echo "  TO BE INSTALLING: ${RR[*]}...";
      sudo yum install -y "${RR[@]}" && return 0;
    else
      return 1;
    fi
  else
    declare -a RR
    for pkg in "$@"; do
      if sudo dpkg --get-selections|grep -Pi "$pkg[ \t]+install" 1>/dev/null; then
        echo "    $pkg exists";
      else
        RR=("${RR[@]}" "$pkg");
      fi
    done

    if [[ ${#RR[@]} -gt 0 ]]; then
      echo "  TO BE INSTALLING: ${RR[*]}...";
      sudo apt-get install -y --force-yes "${RR[@]}" && return 0
    else
      return 1;
    fi
  fi
}
function install-packages () { install_packages "$@"; }
function package-install () { install_packages "$@"; }




########## COLORS

# shellcheck disable=SC2034,SC2155
green='\e[0;32m' # '\e[1;32m' is too bright for white bg.
# shellcheck disable=SC2034,SC2155
endColor='\e[0m'
# shellcheck disable=SC2034,SC2155,SC2006
function colored_eval () {
  local none="\[\033[0m\]"

  local black="\[\033[0;30m\]"
  local dark_gray="\[\033[1;30m\]"
  local blue="\[\033[0;34m\]"
  local light_blue="\[\033[1;34m\]"
  local green="\[\033[0;32m\]"
  local light_green="\[\033[1;32m\]"
  local cyan="\[\033[0;36m\]"
  local light_cyan="\[\033[1;36m\]"
  local red="\[\033[0;31m\]"
  local light_red="\[\033[1;31m\]"
  local purple="\[\033[0;35m\]"
  local light_purple="\[\033[1;35m\]"
  local brown="\[\033[0;33m\]"
  local yellow="\[\033[1;33m\]"
  local light_gray="\[\033[0;37m\]"
  local white="\[\033[1;37m\]"

  local current_tty=`tty | sed -e "s/\/dev\/\(.*\)/\1/"`

  eval "$@"
}
function color-table () {
    for ((i=16; i<256; i++)); do
        printf "\e[48;5;${i}m%03d" $i;
        printf '\e[0m';
        [ ! $(((i - 15) % 6)) -eq 0 ] && printf ' ' || printf '\n'
    done
}



## ii

# shellcheck disable=SC2034,SC2119,SC2046
function ii() {
    local c_red='\e[31m'
    local c_green='\e[32m'
    local c_lblue='\e[1;34m'
    local c_clear='\e[0m'
    echo -ne  "\n${c_red}       You are logged on : ${c_clear}${c_green}$(hostname)${c_clear}"
    echo -ne  "\n${c_red} Additionnal information : ${c_clear}$NC " ; uname -a
    # echo -ne    "${c_red}         Users logged on : ${c_clear}$NC " ; w -h | head -1
    echo -ne    "${c_red}            Current date : ${c_clear}$NC " ; date
    echo -ne    "${c_red}           Machine stats : ${c_clear}$NC" ; uptime
    #echo -e "\n${c_red}Current network location : ${c_clear}$NC " ; scselect
    #echo -ne    "${c_red}Public facing IP Address : ${c_clear}$c_green$(ip-wan)$c_clear / $c_green$(find_gw $(ip-wan))$c_clear"
    echo -ne "${c_red}        Local IP Address : ${c_clear}$c_green$(ip-local)$c_clear / $c_green$(find_gw $(ip-local))$c_clear"
    #echo -ne "\nLocal IP Address  : ${c_red}$(mylocalip)$c_clear / $c_red$(mylocalgw)$c_clear / $c_red$(mylocalni)$c_clear"
    #echo -e "\nDNS Configurations:$NC " ; mylocaldns
    echo ""
    echo "use: 'ip-wan' to query the public ip address of mine."
    echo "use: 'curl -sSL https://hedzr.com/bash/bash-framwork/installer | sudo bash -s' to upgrade \`bash-framework\` and \`ops\` commands."
    echo "avaliable commands: disc-info, ports, ii, ip-wan, ip-lan, ip-gw, ip-mask, ip-subnet, ...."
    echo ""
}

## run at user logined (.bashrc)

at_login () {
  is_interactive_shell && {
    #[ -z "$PS1" ] && {
      #
      #[ -t 0 ] && echo "-t 1" || {
        ii
        echo "" # for spacing
        w|tail -n +2 # uptime information and who is logged in
        echo "" # for spacing
        df -hlT -x udev -x tmpfs -x devtmpfs # disk usage, minus def and swap
        export EDITOR=/usr/bin/nano
        alias pssh="parallel-ssh"
        alias pscp="parallel-scp"

        alias bash-framework-self-update='curl -sSL https://hedzr.com/bash/bash-framework/installer | sudo bash -s'
      #}
    #} || echo "zero PS1"
  } #|| echo -e "\`$USER\` logined: non-interactive shell"
}

devops() {
  sudo -u "devops" "$@"
}



############################################################
#
# https://bitbucket.org/durdn/cfg/src/master/.bashrc?fileviewer=file-view-default
# http://www.techug.com/post/ten-tips-for-wonderful-bash-productivity.html
#
#Global options {{{
export HISTFILESIZE=999999
export HISTSIZE=999999
# export HISTCONTROL=ignoreboth
export HISTCONTROL=ignoredups:ignorespace
shopt -s checkwinsize
shopt -s progcomp

#!! sets vi mode for shell
# set -o vi
#
# if [ -f ~/.bash_aliases ]; then
#     . ~/.bash_aliases
# fi
#
# if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
#     . /etc/bash_completion
# fi
# }}}

# Bashmarks from https://github.com/huyng/bashmarks (see copyright there) {{{

# USAGE:
# s bookmarkname - saves the curr dir as bookmarkname
# g bookmarkname - jumps to the that bookmark
# g b[TAB] - tab completion is available
# l - list all bookmarks

# save current directory to bookmarks
touch ~/.sdirs
function s {
  cat ~/.sdirs | grep -v "export DIR_$1=" > ~/.sdirs1
  mv ~/.sdirs1 ~/.sdirs
  echo "export DIR_$1=$PWD" >> ~/.sdirs
}

# jump to bookmark
function g {
  source ~/.sdirs
  cd $(eval $(echo echo $(echo \$DIR_$1)))
}

# list bookmarks with dirname
function l {
  source ~/.sdirs
  env | grep "^DIR_" | cut -c5- | grep "^.*="
}
# list bookmarks without dirname
function _l {
  source ~/.sdirs
  env | grep "^DIR_" | cut -c5- | grep "^.*=" | cut -f1 -d "="
}

# completion command for g
function _gcomp {
    local curw
    COMPREPLY=()
    curw=${COMP_WORDS[COMP_CWORD]}
    COMPREPLY=($(compgen -W '`_l`' -- $curw))
    return 0
}

# bind completion command for g to _gcomp
complete -F _gcomp g
# }}}
# Fixes hg/mercurial {{{
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
# }}}

#Global aliases  {{{
alias vimo='vim -O '
alias dpaste="curl -F 'content=<-' https://dpaste.de/api/"
# }}}
# Global functions (aka complex aliases) {{{
function f {
  # shellcheck disable=SC2033,SC2086
  find . -type f | grep -v .svn | grep -v .git | grep -i $1
}

function gr {
  # shellcheck disable=SC2033,SC2086
  find . -type f | grep -v .svn | grep -v .git | xargs grep -i $1 | grep -v Binary
}

# print only column x of output
function col {
  awk -v col="$1" '{print $col}'
}
# /usr/bin/col
function real-col() {
  real_col=$(which col)
  "$real_col" "$@"
}

# skip first x words in line
function skip {
    n=$(($1 + 1))
    cut -d' ' -f$n-
}

# global search and replace OSX
function sr {
  # shellcheck disable=SC2033,SC2086
  find . -type f -exec sed -i '' s/$1/$2/g {} +
}

function xr {
  case $1 in
  1)
    xrandr -s 1680x1050
    ;;
  2)
    xrandr -s 1440x900
    ;;
  3)
    xrandr -s 1024x768
    ;;
  esac
}

# shows last modification date for trunk and $1 branch
function glm {
  # shellcheck disable=2046
  echo master $(git log -u master "$2" | grep -m1 Date:)
  # shellcheck disable=2046,SC2086
  echo $1 $(git log -u "$1" "$2" | grep -m1 Date:)
}

# git rename current branch and backup if overwritten
function gmb {
  curr_branch_name=$(git branch | grep \* | cut -c 3-);
  if [ -z $(git branch | cut -c 3- | grep -x "$1") ]; then
    git branch -m "$curr_branch_name" "$1"
  else
    temp_branch_name=$1-old-$RANDOM
    echo "target branch name already exists, renaming to $temp_branch_name"
    git branch -m "$1" "$temp_branch_name"
    git branch -m "$curr_branch_name" "$1"
  fi
}

# git search for extension $1 and occurrence of string $2
function gfe {
  # shellcheck disable=2033
  git f "\.$1" | xargs grep -i "$2" | less
}

#open with vim from a list of files, nth one (vim file number x)
function vfn {
  last_command=$(history 2 | head -1 | cut -d" " -f2- | cut -c 2-);
  # shellcheck disable=2086
  vim "$($last_command | head -$1 | tail -1)"
}

#autocomplete list of possible files and ask which one to open
function gv {
  search_count=1
  search_command="git f"
  search_result=$($search_command "$1")
  editor=gvim

  for f in $search_result; do echo "$search_count. $f";let search_count++; done

  arr=($search_result)
  case "${#arr[@]}" in
    0)
       ;;
    1) nohup "$editor" "${search_result}" 2>/dev/null &
       ;;
    *) echo "enter file number:"
       read -r fn
       nohup "$editor" "${arr[fn-1]}" 2>/dev/null &
       ;;
  esac
}

#open a scratch file in Dropbox
function sc {
  gvim ~/Dropbox/"$(openssl rand -base64 10 | tr -dc 'a-zA-Z')".txt
}
function scratch {
  gvim ~/Dropbox/"$(openssl rand -base64 10 | tr -dc 'a-zA-Z')".txt
}

# Convert a Confluence page on EAC to markdown
function markdowneac {
  curl -Lks -u hz "https://@extranet.atlassian.com/rest/prototype/1/content/$1"  | xmlstarlet sel -I -t -v "/content/body" | xmlstarlet unesc | pandoc -f html -t markdown --atx-headers --no-wrap --reference-links
}
# link all Go folders into projects folder
function lngo {
  # shellcheck disable=SC2011,SC2046
  ls -1 | xargs -I{} ln -s $(pwd)/{} /Users/hz/p/
}
# cd into go source libraries
gocd() {
  # shellcheck disable=SC2164,SC2086
  cd "$(go list -f '{{.Dir}}' $1)"
}
# }}}
# Linux specific config {{{
if [ "$(uname)" == "Linux" ]; then
  shopt -s autocd
  [ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

  # enable color support of ls and also add handy aliases
  if [ -x /usr/bin/dircolors ]; then
      if test -r ~/.dircolors; then eval "$(dircolors -b ~/.dircolors)";else eval "$(dircolors -b)";fi
      alias ls='ls --color=auto'
      # shellcheck disable=SC2032
      alias grep='grep --color=auto'
      alias fgrep='fgrep --color=auto'
      alias egrep='egrep --color=auto'
  fi

  # Add an "alert" alias for long running commands.  Use like so: sleep 10; alert
  alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

  #apt aliases
  alias apt='sudo apt-get'
  alias cs='sudo apt-cache search'
  alias pacman='sudo pacman'
  alias pac='sudo pacman'

  alias ls='ls --color'
  alias ll='ls -l --color'
  alias la='ls -al --color'
  alias less='less -R'

  #rbenv setup
  if [ -d "$HOME/.rbenv" ]; then
    export RBENV_ROOT=/usr/local/var/rbenv
    export PATH="/usr/local/var/rbenv/shims:$PATH"
    eval "$(rbenv init -)";
  fi
fi


# }}}
# OSX specific config {{{
if [ "$(uname)" == "Darwin" ]; then
  export TERM=xterm-256color
  export PATH=/usr/local/bin:/usr/local/sbin:/usr/local/Cellar/python3/3.4.1/bin:$HOME/bin:$PATH
  export MANPATH=/opt/local/share/man:$MANPATH

  #aliases
  alias ls='ls -G'
  alias ll='ls -ltrG'
  alias la='ls -alG'
  alias less='less -R'
  alias fnd='open -a Finder'
  alias gitx='open -a GitX'
  alias grp='grep -RIi'
  alias dm='docker-machine'
  alias dc='docker-compose'
  alias dk='docker'
  alias dn='docker network'

  #open macvim
  function gvim {
    if [ -e "$1" ];
      then open -a MacVim "$@";
      else touch "$@" && open -a MacVim "$@";
    fi
  }

  #setup rbenv {{{
  if which rbenv > /dev/null; then
    export RBENV_ROOT=/usr/local/var/rbenv
    eval "$(rbenv init -)";
    #export PATH="$HOME/.rbenv/shims:$PATH"
    export PATH="/usr/local/var/rbenv/shims:$PATH"
  fi
  # }}}
  #homebrew git autocompletions {{{
  if [ -f "$(brew --prefix)"/etc/bash_completion.d/git-completion.bash ]; then
    # shellcheck disable=SC1090
    . "$(brew --prefix)"/etc/bash_completion.d/git-completion.bash
  fi
  #}}}

  #Pipe2Eval folder for vim extension
  export PIP2EVAL_TMP_FILE_PATH=/tmp/shms

  export WORKON_HOME="/Users/hz/dev/envs"
#  export VIRTUALENV_USE_DISTRIBUTE=1
#  [[ -n "/usr/local/bin/virtualenvwrapper.sh" ]] && source virtualenvwrapper.sh

# golang setup {{{
  export GOPATH=$HOME/go
  export PATH=$PATH:$GOPATH/bin
  export PATH=$PATH:/usr/local/opt/go/libexec/bin
  #export PATH=$HOME/dev/apps/go_appengine:$PATH
  # }}}
fi

# }}}
# MINGW32_NT-5.1 (winxp) specific config {{{
if [ "$(uname)" == "MINGW32_NT-5.1" ]; then
  alias ls='ls --color'
  alias ll='ls -l --color'
  alias la='ls -al --color'
  alias less='less -R'
  alias grep='grep --color=auto'
  alias fgrep='fgrep --color=auto'
  alias egrep='egrep --color=auto'
fi
# }}}
# Boot2docker specific config {{{
if [[ $(uname -a | col 2) == "boot2docker" ]]; then
  export TERM=xterm
fi
# }}}
# Specific systems configs {{{
# }}}
# Liquid Prompt {{{
# LP_ENABLE_SVN=0
# LP_ENABLE_FOSSIL=0
# LP_ENABLE_BZR=0
# LP_ENABLE_BATT=0
# LP_ENABLE_LOAD=0
# LP_ENABLE_PROXY=0
# LP_USER_ALWAYS=0
# LP_HOSTNAME_ALWAYS=0
# [ -f $HOME/.liquidprompt ] && source $HOME/.liquidprompt
# #make sure the history is updated at every command
# shopt -s histappend
# PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND$'\n'}history -a; history -c; history -r"
# }}}
# Java setup {{{
# export PATH=$HOME/jdk1.8.0_31/bin:$PATH
# export JAVA_HOME=$HOME/jdk1.8.0_31/
# }}}
# Set .bin in PATH and it should be first {{{
[ -d "$HOME/.bin" ] && export PATH=$HOME/.bin:$PATH
export EDITOR=nano
# }}}

# 让所有命令作为which的自动补全参数。试试 which[TAB][TAB]
complete -c which
complete -d ls

# shellcheck disable=SC2164
mcd() { [ -d "$1" ] || mkdir -p "$1"; cd "$1";}
cls() { cd "$1" && ls;}
backup() { cp "$1"{,.bak};}
md5check() { md5sum "$1" | grep "$2";}
alias makescript="fc -rnl | head -1 >"
randpw(){ < /dev/urandom tr -dc '_A-Z-a-z-0-9#%@^&' | head -c"${1:-16}";echo;}
genpasswd(){ strings /dev/urandom|grep -oP '[[:alnum:]]|[\#\%\@\&\^]'|head -n "${1:-16}"|tr -d '\n';echo;}
# openssl rand -base64 32
# tr -cd ’[:alnum:]‘ < /dev/urandom | fold -w32 | head -n1;echo
# dd if=/dev/urandom bs=1 count=32 2>/dev/null | base64 -w 0 | rev | cut -b 2- | rev
alias c="clear"
alias histg="history | grep"
alias ..='cd ..'
alias ...='cd ../..'
extract() {
    if [ -f "$1" ] ; then
      case $1 in
        *.tar.bz2)   tar xjf "$1"     ;;
        *.tar.gz)    tar xzf "$1"     ;;
        *.bz2)       bunzip2 "$1"     ;;
        *.rar)       unrar e "$1"     ;;
        *.gz)        gunzip "$1"      ;;
        *.tar)       tar xf "$1"      ;;
        *.tbz2)      tar xjf "$1"     ;;
        *.tgz)       tar xzf "$1"     ;;
        *.zip)       unzip "$1"       ;;
        *.Z)         uncompress "$1"  ;;
        *.7z)        7z x "$1"        ;;
        *)     echo "'$1' cannot be extracted via extract()" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}

#System info
alias cmount="mount | column -t"
alias tree="ls -R | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/   /' -e 's/-/|/'"
sbs(){ du -b --max-depth 1 | sort -nr | perl -pe 's{([0-9]+)}{sprintf "%.1f%s", $1>=2**30? ($1/2**30, "G"): $1>=2**20? ($1/2**20, "M"): $1>=2**10? ($1/2**10, "K"): ($1, "")}e';}
alias intercept="sudo strace -ff -e trace=write -e write=1,2 -p"
alias meminfo='free -m -l -t'
alias ps\?="ps auxef | grep"
alias volume="amixer get Master | sed '1,4 d' | cut -d [ -f 2 | cut -d ] -f 1"

alias ipinfo="curl ifconfig.me && curl ifconfig.me/host"
getlocation() { lynx -dump "http://www.ip-adress.com/ip_tracer/?QRY=$1"|grep address|egrep 'city|state|country'|awk '{print $3,$4,$5,$6,$7,$8}'|sed 's\ip address flag \\'|sed 's\My\\';}


# shellcheck disable=SC2155
export PS1="\[\033[38;5;100m\]\u\[$(tput sgr0)\]\[\033[38;5;15m\]@\h:\[$(tput sgr0)\]\[\033[38;5;116m\]\w\[$(tput sgr0)\]\[\033[38;5;15m\]\\$ \[$(tput sgr0)\]"




# echo "$?"

# if [[ $- = *i* ]]; then
#     echo "in source"; return 0
# else
#     exit 0
# fi


if [[ $SHOULD_I_EXPORT -eq 1 ]]; then export -f \
       if_os if_not_os if_nix realpathx \
       mylocalip \
       sshcall scppull scppush \
       find_gw find_ip \
       "check_keepalived_status" \
       "check_mysql_status" \
       "mysql_call" \
       "mysql_status" \
       "mysql_extended_status" \
       install_packages \
       is_package_installed \
;else echo ".env was sourced in but no permanent exports.">/dev/null; fi
:

